<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_main_8cpp_source" xml:lang="en-US">
<title>main.cpp</title>
<indexterm><primary>src/main.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_main_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_manolib_8h">manolib.h</link>&quot;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_functions_8h">functions.h</link>&quot;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_student_8h">student.h</link>&quot;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_vector_8h">vector.h</link>&quot;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00005"/>00005 
<anchor xml:id="_main_8cpp_source_1l00006"/>00006 
<anchor xml:id="_main_8cpp_source_1l00007"/><link linkend="_main_8cpp_1a78c70a8a9c9b3c7ccc29d6682f26a2c3">00007</link> <emphasis role="keyword">using&#32;</emphasis><link linkend="_main_8cpp_1a78c70a8a9c9b3c7ccc29d6682f26a2c3">Container</link>&#32;=&#32;<link linkend="_class_vektor">Vektor&lt;Stud&gt;</link>;
<anchor xml:id="_main_8cpp_source_1l00008"/>00008 <emphasis role="comment">//using&#32;Container&#32;=&#32;std::vector&lt;Stud&gt;;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00009"/>00009 
<anchor xml:id="_main_8cpp_source_1l00010"/>00010 
<anchor xml:id="_main_8cpp_source_1l00011"/><link linkend="_main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00011</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>()
<anchor xml:id="_main_8cpp_source_1l00012"/>00012 {&#32;&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;srand(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(time(0)));
<anchor xml:id="_main_8cpp_source_1l00014"/>00014 
<anchor xml:id="_main_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;
<anchor xml:id="_main_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1a78c70a8a9c9b3c7ccc29d6682f26a2c3">Container</link>&#32;grupe;
<anchor xml:id="_main_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//cout&#32;&lt;&lt;&#32;&quot;Using&#32;container:&#32;&quot;&#32;&lt;&lt;&#32;typeid(Container).name()&#32;&lt;&lt;&#32;endl;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;a;
<anchor xml:id="_main_8cpp_source_1l00020"/>00020 
<anchor xml:id="_main_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;1&#32;-&#32;Input&#32;everything&#32;manually&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;2&#32;-&#32;Input&#32;names,&#32;generate&#32;scores&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;3&#32;-&#32;Generate&#32;everything&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;4&#32;-&#32;Read&#32;from&#32;file&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;5&#32;-&#32;Performance&#32;test&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;6&#32;-&#32;Class&#32;tests&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;7&#32;-&#32;Vektor&#32;class&#32;tests&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00028"/>00028 
<anchor xml:id="_main_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin&#32;&gt;&gt;&#32;a;
<anchor xml:id="_main_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(),&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
<anchor xml:id="_main_8cpp_source_1l00031"/>00031 
<anchor xml:id="_main_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(a&#32;&lt;&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>&#32;||&#32;a&#32;&gt;&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>)&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;input.&#32;Enter&#32;1,&#32;2,&#32;3,&#32;4,&#32;5&#32;or&#32;6:&#32;&quot;</emphasis>;
<anchor xml:id="_main_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin&#32;&gt;&gt;&#32;a;
<anchor xml:id="_main_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(),&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
<anchor xml:id="_main_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00038"/>00038 
<anchor xml:id="_main_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;==&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>)&#32;
<anchor xml:id="_main_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;grupe&#32;=&#32;<link linkend="_functions_8h_1a25802cd098c0d98a92595d549bc40fec">ManualInput&lt;Container&gt;</link>();
<anchor xml:id="_main_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_main_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;==&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>)&#32;
<anchor xml:id="_main_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;grupe&#32;=&#32;<link linkend="_functions_8h_1a9c06d4f93ec8894d08362db40e310362">GenerateScores&lt;Container&gt;</link>();
<anchor xml:id="_main_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_main_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;==&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>)&#32;
<anchor xml:id="_main_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;grupe&#32;=&#32;<link linkend="_functions_8h_1aafc88307915ae13fe05939c131f8b6bc">GenerateEverything&lt;Container&gt;</link>();
<anchor xml:id="_main_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_main_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;==&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>)&#32;
<anchor xml:id="_main_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;filename;
<anchor xml:id="_main_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Enter&#32;file&#32;name:&#32;&quot;</emphasis>;
<anchor xml:id="_main_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin&#32;&gt;&gt;&#32;filename;
<anchor xml:id="_main_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(),&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
<anchor xml:id="_main_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;grupe&#32;=&#32;<link linkend="_functions_8h_1ac1be372811ceda50183db8795ddaf219">ReadFile&lt;Container&gt;</link>(filename);
<anchor xml:id="_main_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(grupe.<link linkend="_class_vektor_1a68f21ad21b36b39f8e398c7efdb70085">empty</link>())&#32;
<anchor xml:id="_main_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Error:&#32;Could&#32;not&#32;read&#32;file&#32;or&#32;file&#32;is&#32;empty.&quot;</emphasis>);
<anchor xml:id="_main_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_main_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;==&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>)&#32;
<anchor xml:id="_main_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;grupe&#32;=&#32;<link linkend="_functions_8h_1a9bf76230fb2862461fb6032819fdb096">SpeedTesting&lt;Container&gt;</link>();
<anchor xml:id="_main_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_main_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;==&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>)&#32;
<anchor xml:id="_main_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_functions_8h_1a5995a575e504d5fa072267b51ab96704">TestStud</link>();&#32;&#32;<emphasis role="comment">//&#32;Run&#32;the&#32;test&#32;function</emphasis>
<anchor xml:id="_main_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_main_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;==&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>)&#32;
<anchor xml:id="_main_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;og;
<anchor xml:id="_main_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vektor&#32;&lt;int&gt;&#32;klase;
<anchor xml:id="_main_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;sz&#32;=&#32;100000;&#32;<emphasis role="comment">//&#32;100000,&#32;1000000,&#32;10000000,&#32;100000000</emphasis>
<anchor xml:id="_main_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin&gt;&gt;sz;
<anchor xml:id="_main_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Size:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;sz&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;start_split&#32;=&#32;std::chrono::high_resolution_clock::now();
<anchor xml:id="_main_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;sz;&#32;++i)&#32;og.push_back(i);
<anchor xml:id="_main_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;end_split&#32;=&#32;std::chrono::high_resolution_clock::now();
<anchor xml:id="_main_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::chrono::duration&lt;double&gt;&#32;split_duration&#32;=&#32;end_split&#32;-&#32;start_split;
<anchor xml:id="_main_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;OG&#32;vector:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fixed&#32;&lt;&lt;&#32;setprecision(5)&#32;&lt;&lt;&#32;split_duration.count()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;s&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00087"/>00087 
<anchor xml:id="_main_8cpp_source_1l00088"/>00088 
<anchor xml:id="_main_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;start&#32;=&#32;std::chrono::high_resolution_clock::now();
<anchor xml:id="_main_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;sz;&#32;++i)&#32;klase.<link linkend="_class_vektor_1a9aa67f181dc9c7a210c46d11df876539">push_back</link>(i);
<anchor xml:id="_main_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;end&#32;=&#32;std::chrono::high_resolution_clock::now();
<anchor xml:id="_main_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::chrono::duration&lt;double&gt;&#32;duration&#32;=&#32;end&#32;-&#32;start;
<anchor xml:id="_main_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Vektor&#32;class:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fixed&#32;&lt;&lt;&#32;setprecision(5)&#32;&lt;&lt;&#32;duration.count()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;s&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_main_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(grupe.<link linkend="_class_vektor_1a68f21ad21b36b39f8e398c7efdb70085">empty</link>())&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::runtime_error(<emphasis role="stringliteral">&quot;Error:&#32;No&#32;data&#32;to&#32;process.&quot;</emphasis>);
<anchor xml:id="_main_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00100"/>00100 
<anchor xml:id="_main_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_functions_8h_1a3a1d305f378b3efa8cf1e99379ac50d3">FinalScore</link>(grupe);&#32;<emphasis role="comment">//&#32;Calculating&#32;final&#32;scores</emphasis>
<anchor xml:id="_main_8cpp_source_1l00102"/>00102 
<anchor xml:id="_main_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_functions_8h_1a9a8228525c154b5f1eceb473572afe08">Sorting</link>(grupe);&#32;<emphasis role="comment">//&#32;Sorting&#32;students</emphasis>
<anchor xml:id="_main_8cpp_source_1l00104"/>00104 
<anchor xml:id="_main_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Show&#32;results&#32;in&#32;file&#32;or&#32;terminal?&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;1&#32;-&#32;File&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;2&#32;-&#32;Terminal&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00108"/>00108 
<anchor xml:id="_main_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;y;
<anchor xml:id="_main_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin&#32;&gt;&gt;&#32;y;
<anchor xml:id="_main_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(cin.fail()&#32;||&#32;(y&#32;!=&#32;1&#32;&amp;&amp;&#32;y&#32;!=&#32;2))&#32;
<anchor xml:id="_main_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin.clear();&#32;
<anchor xml:id="_main_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(),&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>);&#32;<emphasis role="comment">//&#32;Ignore&#32;invalid&#32;input</emphasis>
<anchor xml:id="_main_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;input.&#32;Enter&#32;1&#32;or&#32;2:&#32;&quot;</emphasis>;
<anchor xml:id="_main_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cin&#32;&gt;&gt;&#32;y;
<anchor xml:id="_main_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(y&#32;==&#32;2)&#32;
<anchor xml:id="_main_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_functions_8h_1ab29d065e680921bf8f5dff9d3fad63a8">OutputToTerminal</link>(grupe);
<anchor xml:id="_main_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;
<anchor xml:id="_main_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_functions_8h_1afeeefbd9055158b13997f50d7b851b95">OutputToFile</link>(grupe);
<anchor xml:id="_main_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_main_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::exception&amp;&#32;e)&#32;
<anchor xml:id="_main_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;An&#32;error&#32;occurred:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;e.what()&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;
<anchor xml:id="_main_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)&#32;
<anchor xml:id="_main_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;An&#32;unknown&#32;error&#32;occurred.&quot;</emphasis>&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_main_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;
<anchor xml:id="_main_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00134"/>00134 
<anchor xml:id="_main_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_main_8cpp_source_1l00136"/>00136 }
</programlisting></section>
