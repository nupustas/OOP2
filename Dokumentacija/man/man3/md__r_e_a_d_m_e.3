.TH "md__r_e_a_d_m_e" 3 "Studentų galutinio balo skaičiuoklė" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__r_e_a_d_m_e \- Studentų galutinio balo skaičiavimo programa 
.PP


.PP
Šis projektas yra C++ programa, kuri apskaičiuoja galutinį studento balą pagal jų namų darbų, bei egzamino įvertinimus\&.
.SH "Projekto paleidimas naudojant CMake"
.PP
.SS "1\&. Reikalingi įrankiai"
Prieš paleidžiant projektą, įsitikinkite, kad turite šiuos įrankius:

.PP
.IP "\(bu" 2
\fBCMake\fP: \fRAtsisiųsti CMake\fP (minimum v3\&.10)
.IP "\(bu" 2
\fBC++ kompiliatorius\fP (GCC, CLANG, MSVC)
.PP
.SS "2\&. Parsisiųskite projektą, jei jo dar neturite"
.SS "Projekto klonavimas iš git:"
.PP
.nf
git clone https://github\&.com/nupustas/oop\&.vp
.fi
.PP
 Paklonave projektą, atidarykite jo aplanką\&.
.SS "Projekto kompiliavimas:"
.PP
.nf
mkdir build
cd build
cmake \&.\&.
.fi
.PP
 
.PP
.nf
cmake \-\-build \&. \-\-config Release

.fi
.PP
 
.SS "Projekto paleidimas:"
.PP
.nf
cd release
OOP\&.exe
.fi
.PP
 
.SH "Projekto struktūra:"
.PP
.IP "\(bu" 2
\fB\fRinclude/\fP\fP: Aplankalas, kuriame laikomi projekto header failai\&.
.IP "\(bu" 2
\fB\fRsrc/\fP\fP: Pagrindinis programos kodas\&.
.IP "\(bu" 2
\fB\fRCMakeLists\&.txt\fP\fP: CMake instrukcijos kompiliavimui\&.
.IP "\(bu" 2
\fB\fR\fBReadME\&.md\fP\fP\fP: Programos instrukcija\&.
.PP
.SH "V3\&.0"
.PP
.SS "Vector klasės funkcijų pavyzdžiai"
.SS "1\&. \fRvoid erase(size_t index)\fP"
Ši funkcija pašalina vieną konteinerio elementą, kurio index yra paduotas\&. 
.SS "Veikimas:"
Iš pradžių patikrinama ar paduotas \fBindex\fP nėra didesnis nei esamo konteinerio dydis, jei ne, visi elementai esantys dešinėje index'o pastumiami į kairę ir pakeičiamas konteinerio dydis\&.
.SS "2\&. \fRV* erase(V* first, V* last)\fP"
Ši funkcija, pašalina konteinerio elementus nuo į ja paduotų index: nuo ** V* first ** iki ** V* last ** 
.SS "Veikimas:"
Patikrinama ar first nėra mažesnis už masyvo pradžią, ar last nėra didesnis už masyvo pabaigą, ir ar first < last\&. Tada pointeriai first ir last paverčiami į index'us, ir elementai kurie yra už 'last' yra pastumiami į kairę\&. Pakeičiamas konteinerio 'dydis' ir grąžinamas pirmo elemento po ištrintų iteratorius\&. 
.br
.SS "3\&. \fRV& operator[](size_t index)\fP"
Operatorius [], leidžia prieti prie norimo elemento konteineryje\&. Norint pasiekti bet kokį elementą konteineryje, naudojamas šis operatorius per norimo elemento index'ą\&. \fRPvz\&.: Vector[i]\fP 
.SS "Veikimas:"
Patikrinama ar index nėra didesnis už konteinerio dydį, jei ne grąžinamas duomenų masyvo elementas\&. \fRreturn duom[index];\fP
.SS "4\&. \fRbool operator==(const Vektor<V>& other)\fP"
Operatorius ==, šis leidžia patikrinti ar du konteineriai yra lygūs\&. 
.SS "Veikimas:"
Visų pirmą patikrinama ar konteinerių dydis lygus, jei ne iškart grąžinama \fBfalse\fP reikšmė\&. Jei konteinerių dydis toks pat, tuomet tikrinama ar kiekvinas konteinerių elementas lygus\&. Jei visi elementai lygūs, grąžinama \fBtrue\fP reikšmė\&.
.SS "5\&. \fRvoid pop_back()\fP"
Ši funkcija leidžia pašalinti konteinerio paskutinį elementą\&. 
.SS "Veikimas:"
Patikrinama ar konteineris nėra tusčias, jei ne, tuomet jo dydis yra pamažinamas vienu\&. 
.PP
.nf
\-\-dydis;

.fi
.PP
.SH "Testavimas"
.PP
.SS "Šiose lentelėse pateikiami skirtingų C++ konteinerių (vector, list, deque) testavimo rezultatai\&."
.SS "🖥 Testavimo sistemos parametrai:"
.IP "\(bu" 2
\fB\fRProcesorius: Intel Core i5-10300H\fP\fP
.IP "\(bu" 2
\fB\fROperatyvioji atmintis: 2×4GB DDR4 3200MHz\fP\fP
.PP
.SH "- \fB\fRDiskas: 512GB NVMe SSD\fP\fP"
.PP
.SS "Originalus Vector vs Vektor klasė"
.IP "\(bu" 2
\fBUžpildymas naudojant push_back() funkciją\fP Dydis   Vector   Klasė    10000   0\&.00010 s   0\&.00006 s    100000   0\&.00101 s   0\&.00051 s    1000000   0\&.00414 s   0\&.00477 s    10000000   0\&.04605 s   0\&.04761 s    100000000   0\&.50926 s   0\&.39100 s    1000000000   9\&.06876 s   6\&.91821 s   
.IP "\(bu" 2
\fBProgramos spartos analizė\fP Failas   Vector   Klasė    Studentai10000   0\&.17188 s   0\&.13205 s    Studentai100000   1\&.03871 s   1\&.09587 s    Studentai1000000   9\&.88531 s   10\&.2013 s    Studentai10000000   100\&.456 s   110\&.858 s   
.PP
.SS "Testų analizė"
.IP "\(bu" 2
Užpildant konteinerį naudojant push_back() funkciją, vektoriaus klasė yra spartesnė
.IP "\(bu" 2
Naudojant programoje, klasė yra šiek tiek pranašesnė apdorojant mažus studentų kiekius, tačiau kai studentų daug originalus vektorius vistiek veikia sparčiau\&. 
.PP

